{"version":3,"file":"static/js/515.7ec09263.chunk.js","mappings":"qNAIMA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,IAAPD,CAAH,gEAGN,SAAAE,GAAI,OAAIA,EAAKC,WAGXC,EAAcJ,EAAAA,GAAAA,IAAH,+BACb,SAAAE,GAAI,OAAIA,EAAKC,WAGJE,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,IAAQC,IAAAA,OAAR,MAAc,SAAd,EAAwBJ,EAAxB,EAAwBA,QAAxB,OACnBG,GACE,SAACF,EAAD,CACED,QAASA,EACTG,IAAG,yCAAoCA,GACvCC,IAAKA,KAGP,SAACR,EAAD,CAAMI,QAASA,M,oECpBNK,E,QAAmBR,GAAAA,IAAH,uIAOzB,SAAAE,GACA,GAAIA,EAAKO,QACP,MAAM,YAAN,OAAmBP,EAAKO,a,+FCRjBC,EAAmB,SAACC,GAAiC,IAAjBT,EAAgB,uDAAT,KACtD,GAAwBU,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACRH,EAAU,WACVL,EAAeT,GACZkB,KAAKN,GACLO,MAAMH,GACNI,QAAQN,EAAU,cACpB,CAACL,EAAgBT,IACb,CAAEW,KAAAA,EAAME,OAAAA,EAAQE,MAAAA,IAGzBP,EAAiBa,UAAY,CAC3BZ,eAAgBa,IAAAA,KAAAA,WAChBtB,KAAMsB,IAAAA,S,sGClBKC,EAAOzB,EAAAA,GAAAA,EAAH,4CAIJ0B,EAAY1B,EAAAA,GAAAA,IAAH,8DAKT2B,EAAO3B,EAAAA,GAAAA,IAAH,0D,SCPJ4B,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACxB,SAACH,EAAD,WACS,OAANG,QAAM,IAANA,OAAA,EAAAA,EAAQC,QAAS,GAChBD,EAAOE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OACT,UAACP,EAAD,YACE,SAAC,IAAD,CACErB,IAAK2B,EACL1B,IAAK2B,EACL/B,QAAS,mCAEX,SAACsB,EAAD,UAAOS,MANEF,S,uCCFNG,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACAvB,GAASH,EAAAA,EAAAA,GAAiB4B,EAAAA,GAAWF,GAArCvB,KAER,OACE,SAACL,EAAA+B,EAAD,UAAmB1B,IAAQ,SAACe,EAAD,CAAYC,OAAQhB,Q,4NCTtC2B,EAAyB,WAAe,IAAdC,EAAa,uDAAP,GAC3C,OAAOC,OAAOC,QAAQF,GACnBV,KAAI,SAAAa,GAAI,OAAIA,EAAKC,KAAK,QACtBA,KAAK,MAGVL,EAAuBjB,UAAY,CACjCkB,IAAKjB,IAAAA,Q,aCNMsB,EAAqB,SAACjC,EAAMkC,EAAMC,GACxB,KAAb,OAAJnC,QAAI,IAAJA,OAAA,EAAAA,EAAMiB,SACRmB,EAAAA,GAAAA,MAAYF,EAAM,CAAEC,OAAAA,KAIxBF,EAAmBI,SAAW,CAC5BrC,KAAMW,IAAAA,OAAAA,WACNuB,KAAMvB,IAAAA,OAAAA,WACNwB,OAAQxB,IAAAA,QCPV2B,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAa,CACjBC,QAAS,mCACTC,SAAU,MAENC,EACJ,4gBACIP,EAASR,EAAuBY,GAEzBI,EAAc,mCAAG,WAC5BC,GAD4B,qIAEgB,GAAlCC,EAFkB,EAE1BC,OAF0B,IAEF1C,MAAAA,OAFE,kBAILkC,IAAAA,IAAUM,GAJL,UAItBG,EAJsB,QAKfF,EALe,iCAMlBE,EAAS/C,KAAK6C,GANI,4DAOlBE,EAAS/C,KAPS,mCAKtBA,EALsB,KASxBI,GAAO6B,EAAmBjC,EAAM0C,GATR,kBAUrB1C,GAVqB,4CAAH,sDAadgD,EAAqB,kBAChCL,EAAe,uBAAD,OAAwBR,GAAU,CAAEW,OAAQ,aAE/CG,EAAqB,mCAAG,WAAMC,GAAN,0FACnCA,EACIP,EAAe,uBAAD,OAAwBO,EAAxB,YAAiCf,GAAU,CACvDW,OAAQ,UACR1C,OAAO,SAET+C,GAN+B,2CAAH,sDAQrBC,EAAsB,mCAAG,WAAMjC,GAAN,0FACpCwB,EAAe,SAAD,OAAUxB,EAAV,YAAgBgB,KADM,2CAAH,sDAGtBV,EAAS,mCAAG,WAAMN,GAAN,0FACvBwB,EAAe,SAAD,OAAUxB,EAAV,oBAAwBgB,GAAU,CAAEW,OAAQ,UADnC,2CAAH,sDAGTO,EAAU,mCAAG,WAAMlC,GAAN,0FACxBwB,EAAe,SAAD,OAAUxB,EAAV,4BAAgCoB,EAAWC,SAAW,CAClEM,OAAQ,aAFc,2CAAH,sDAKvBH,EAAeN,SAAW,CACxBO,QAASjC,IAAAA,KAAAA","sources":["components/Utils/ImageApi.jsx","components/Utils/SectionContainer.jsx","helpers/useFetchFilmInfo.js","components/ActorsList/ActorsList.styled.jsx","components/ActorsList/ActorsList.jsx","pages/Cast.jsx","helpers/createApiConfig.js","helpers/getErrorFromLength.js","service/FilmAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { IoMdImages } from 'react-icons/io';\nimport PropTypes from 'prop-types';\n\nconst Icon = styled(IoMdImages)`\n  width: 100%;\n  height: 100%;\n  ${prop => prop.styling}\n`;\n\nconst StyledImage = styled.img`\n  ${prop => prop.styling}\n`;\n\nexport const Image = ({ src, alt = 'poster', styling }) =>\n  src ? (\n    <StyledImage\n      styling={styling}\n      src={`https://image.tmdb.org/t/p/w500${src}`}\n      alt={alt}\n    />\n  ) : (\n    <Icon styling={styling} />\n  );\n\nImage.propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string,\n  styling: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const SectionContainer = styled.div`\n  width: 1000px;\n  padding: 20px 0;\n  font-size: 14px;\n  margin: 0 auto;\n  align-items: stretch;\n\n  ${prop => {\n    if (prop.display) {\n      return `display: ${prop.display}`;\n    }\n  }}\n`;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const useFetchFilmInfo = (functionForApi, prop = null) => {\n  const [data, setData] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setStatus('loading');\n    functionForApi(prop)\n      .then(setData)\n      .catch(setError)\n      .finally(setStatus('resolve'));\n  }, [functionForApi, prop]);\n  return { data, status, error };\n};\n\nuseFetchFilmInfo.propTypes = {\n  functionForApi: PropTypes.func.isRequired,\n  prop: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Name = styled.p`\n  padding: 10px 0;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const Card = styled.div`\n  width: 100px;\n  margin: 15px;\n`;\n","import { Image } from 'components/Utils/ImageApi';\nimport { Name, Container, Card } from './ActorsList.styled';\nimport PropTypes from 'prop-types';\n\nexport const ActorsList = ({ actors }) => (\n  <Container>\n    {actors?.length > 0 &&\n      actors.map(({ id, profile_path, name }) => (\n        <Card key={id}>\n          <Image\n            src={profile_path}\n            alt={name}\n            styling={' width: 100px; height: 150px;'}\n          />\n          <Name>{name}</Name>\n        </Card>\n      ))}\n  </Container>\n);\n\nActorsList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { ActorsList } from 'components/ActorsList/ActorsList';\nimport { SectionContainer } from 'components/Utils/SectionContainer';\nimport { useFetchFilmInfo } from 'helpers/useFetchFilmInfo';\nimport { useParams } from 'react-router-dom';\nimport { getActors } from 'service/FilmAPI';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const { data } = useFetchFilmInfo(getActors, movieId);\n\n  return (\n    <SectionContainer>{data && <ActorsList actors={data} />}</SectionContainer>\n  );\n};\n","import PropTypes from 'prop-types';\n\nexport const createApiConfiguration = (obj = {}) => {\n  return Object.entries(obj)\n    .map(type => type.join('='))\n    .join('&');\n};\n\ncreateApiConfiguration.propTypes = {\n  obj: PropTypes.object,\n};\n","import { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nexport const getErrorFromLength = (data, text, config) => {\n  if (data?.length === 0) {\n    toast.error(text, { config });\n  }\n};\n\ngetErrorFromLength.propType = {\n  data: PropTypes.object.isRequired,\n  text: PropTypes.string.isRequired,\n  config: PropTypes.object,\n};\n","import axios from 'axios';\nimport { createApiConfiguration } from 'helpers/createApiConfig';\nimport { getErrorFromLength } from 'helpers/getErrorFromLength';\nimport PropTypes from 'prop-types';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst DATA_FETCH = {\n  api_key: '7b5bc84100d595f56fff5f28d8089376',\n  language: 'ru',\n};\nconst textError =\n  'К сожалению, поиск по сайту не дал никаких результатов. Попробуйте изменить или сократить Ваш запрос.';\nconst config = createApiConfiguration(DATA_FETCH);\n\nexport const getPublication = async (\n  request,\n  { return: whatNeedReturn, error = false } = {}\n) => {\n  const response = await axios.get(request);\n  const data = whatNeedReturn\n    ? await response.data[whatNeedReturn]\n    : await response.data;\n\n  if (error) getErrorFromLength(data, textError);\n  return data;\n};\n\nexport const getPublicationsDay = () =>\n  getPublication(`/trending/movie/day?${config}`, { return: 'results' });\n\nexport const getPublicationsSearch = async value =>\n  value\n    ? getPublication(`/search/movie?query=${value}&${config}`, {\n        return: 'results',\n        error: true,\n      })\n    : undefined;\n\nexport const getPublicationsOneFilm = async id =>\n  getPublication(`movie/${id}?${config}`);\n\nexport const getActors = async id =>\n  getPublication(`movie/${id}/credits?${config}`, { return: 'cast' });\n\nexport const getRewiews = async id =>\n  getPublication(`movie/${id}/reviews?api_key=${DATA_FETCH.api_key}`, {\n    return: 'results',\n  });\n\ngetPublication.propType = {\n  request: PropTypes.func.isRequired,\n};\n"],"names":["Icon","styled","IoMdImages","prop","styling","StyledImage","Image","src","alt","SectionContainer","display","useFetchFilmInfo","functionForApi","useState","data","setData","status","setStatus","error","setError","useEffect","then","catch","finally","propTypes","PropTypes","Name","Container","Card","ActorsList","actors","length","map","id","profile_path","name","Cast","movieId","useParams","getActors","S","createApiConfiguration","obj","Object","entries","type","join","getErrorFromLength","text","config","toast","propType","axios","DATA_FETCH","api_key","language","textError","getPublication","request","whatNeedReturn","return","response","getPublicationsDay","getPublicationsSearch","value","undefined","getPublicationsOneFilm","getRewiews"],"sourceRoot":""}